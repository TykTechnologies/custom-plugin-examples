// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_object.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Coprocess {
  public static class Dispatcher
  {
    static readonly string __ServiceName = "coprocess.Dispatcher";

    static readonly Marshaller<global::Coprocess.Object> __Marshaller_Object = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coprocess.Object.Parser.ParseFrom);
    static readonly Marshaller<global::Coprocess.Event> __Marshaller_Event = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coprocess.Event.Parser.ParseFrom);
    static readonly Marshaller<global::Coprocess.EventReply> __Marshaller_EventReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coprocess.EventReply.Parser.ParseFrom);

    static readonly Method<global::Coprocess.Object, global::Coprocess.Object> __Method_Dispatch = new Method<global::Coprocess.Object, global::Coprocess.Object>(
        MethodType.Unary,
        __ServiceName,
        "Dispatch",
        __Marshaller_Object,
        __Marshaller_Object);

    static readonly Method<global::Coprocess.Event, global::Coprocess.EventReply> __Method_DispatchEvent = new Method<global::Coprocess.Event, global::Coprocess.EventReply>(
        MethodType.Unary,
        __ServiceName,
        "DispatchEvent",
        __Marshaller_Event,
        __Marshaller_EventReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Coprocess.CoprocessObjectReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Dispatcher</summary>
    public abstract class DispatcherBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Coprocess.Object> Dispatch(global::Coprocess.Object request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Coprocess.EventReply> DispatchEvent(global::Coprocess.Event request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Dispatcher</summary>
    public class DispatcherClient : ClientBase<DispatcherClient>
    {
      /// <summary>Creates a new client for Dispatcher</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DispatcherClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Dispatcher that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DispatcherClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DispatcherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DispatcherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Coprocess.Object Dispatch(global::Coprocess.Object request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Dispatch(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coprocess.Object Dispatch(global::Coprocess.Object request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Dispatch, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Coprocess.Object> DispatchAsync(global::Coprocess.Object request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DispatchAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Coprocess.Object> DispatchAsync(global::Coprocess.Object request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Dispatch, null, options, request);
      }
      public virtual global::Coprocess.EventReply DispatchEvent(global::Coprocess.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DispatchEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coprocess.EventReply DispatchEvent(global::Coprocess.Event request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DispatchEvent, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Coprocess.EventReply> DispatchEventAsync(global::Coprocess.Event request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DispatchEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Coprocess.EventReply> DispatchEventAsync(global::Coprocess.Event request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DispatchEvent, null, options, request);
      }
      protected override DispatcherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DispatcherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(DispatcherBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Dispatch, serviceImpl.Dispatch)
          .AddMethod(__Method_DispatchEvent, serviceImpl.DispatchEvent).Build();
    }

  }
}
#endregion

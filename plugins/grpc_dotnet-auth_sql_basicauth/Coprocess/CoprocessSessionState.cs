// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocess_session_state.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Coprocess {

  /// <summary>Holder for reflection information generated from coprocess_session_state.proto</summary>
  public static partial class CoprocessSessionStateReflection {

    #region Descriptor
    /// <summary>File descriptor for coprocess_session_state.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoprocessSessionStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1jb3Byb2Nlc3Nfc2Vzc2lvbl9zdGF0ZS5wcm90bxIJY29wcm9jZXNzIioK",
            "CkFjY2Vzc1NwZWMSCwoDdXJsGAEgASgJEg8KB21ldGhvZHMYAiADKAkicwoQ",
            "QWNjZXNzRGVmaW5pdGlvbhIQCghhcGlfbmFtZRgBIAEoCRIOCgZhcGlfaWQY",
            "AiABKAkSEAoIdmVyc2lvbnMYAyADKAkSKwoMYWxsb3dlZF91cmxzGAQgAygL",
            "MhUuY29wcm9jZXNzLkFjY2Vzc1NwZWMiLwoNQmFzaWNBdXRoRGF0YRIQCghw",
            "YXNzd29yZBgBIAEoCRIMCgRoYXNoGAIgASgJIhkKB0pXVERhdGESDgoGc2Vj",
            "cmV0GAEgASgJIiEKB01vbml0b3ISFgoOdHJpZ2dlcl9saW1pdHMYASADKAEi",
            "+AYKDFNlc3Npb25TdGF0ZRISCgpsYXN0X2NoZWNrGAEgASgDEhEKCWFsbG93",
            "YW5jZRgCIAEoARIMCgRyYXRlGAMgASgBEgsKA3BlchgEIAEoARIPCgdleHBp",
            "cmVzGAUgASgDEhEKCXF1b3RhX21heBgGIAEoAxIUCgxxdW90YV9yZW5ld3MY",
            "ByABKAMSFwoPcXVvdGFfcmVtYWluaW5nGAggASgDEhoKEnF1b3RhX3JlbmV3",
            "YWxfcmF0ZRgJIAEoAxJACg1hY2Nlc3NfcmlnaHRzGAogAygLMikuY29wcm9j",
            "ZXNzLlNlc3Npb25TdGF0ZS5BY2Nlc3NSaWdodHNFbnRyeRIOCgZvcmdfaWQY",
            "CyABKAkSFwoPb2F1dGhfY2xpZW50X2lkGAwgASgJEjoKCm9hdXRoX2tleXMY",
            "DSADKAsyJi5jb3Byb2Nlc3MuU2Vzc2lvblN0YXRlLk9hdXRoS2V5c0VudHJ5",
            "EjEKD2Jhc2ljX2F1dGhfZGF0YRgOIAEoCzIYLmNvcHJvY2Vzcy5CYXNpY0F1",
            "dGhEYXRhEiQKCGp3dF9kYXRhGA8gASgLMhIuY29wcm9jZXNzLkpXVERhdGES",
            "FAoMaG1hY19lbmFibGVkGBAgASgIEhMKC2htYWNfc2VjcmV0GBEgASgJEhMK",
            "C2lzX2luYWN0aXZlGBIgASgIEhcKD2FwcGx5X3BvbGljeV9pZBgTIAEoCRIU",
            "CgxkYXRhX2V4cGlyZXMYFCABKAMSIwoHbW9uaXRvchgVIAEoCzISLmNvcHJv",
            "Y2Vzcy5Nb25pdG9yEiEKGWVuYWJsZV9kZXRhaWxlZF9yZWNvcmRpbmcYFiAB",
            "KAgSEAoIbWV0YWRhdGEYFyABKAkSDAoEdGFncxgYIAMoCRINCgVhbGlhcxgZ",
            "IAEoCRIUCgxsYXN0X3VwZGF0ZWQYGiABKAkSHQoVaWRfZXh0cmFjdG9yX2Rl",
            "YWRsaW5lGBsgASgDEhgKEHNlc3Npb25fbGlmZXRpbWUYHCABKAMaUAoRQWNj",
            "ZXNzUmlnaHRzRW50cnkSCwoDa2V5GAEgASgJEioKBXZhbHVlGAIgASgLMhsu",
            "Y29wcm9jZXNzLkFjY2Vzc0RlZmluaXRpb246AjgBGjAKDk9hdXRoS2V5c0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Coprocess.AccessSpec), global::Coprocess.AccessSpec.Parser, new[]{ "Url", "Methods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Coprocess.AccessDefinition), global::Coprocess.AccessDefinition.Parser, new[]{ "ApiName", "ApiId", "Versions", "AllowedUrls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Coprocess.BasicAuthData), global::Coprocess.BasicAuthData.Parser, new[]{ "Password", "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Coprocess.JWTData), global::Coprocess.JWTData.Parser, new[]{ "Secret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Coprocess.Monitor), global::Coprocess.Monitor.Parser, new[]{ "TriggerLimits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Coprocess.SessionState), global::Coprocess.SessionState.Parser, new[]{ "LastCheck", "Allowance", "Rate", "Per", "Expires", "QuotaMax", "QuotaRenews", "QuotaRemaining", "QuotaRenewalRate", "AccessRights", "OrgId", "OauthClientId", "OauthKeys", "BasicAuthData", "JwtData", "HmacEnabled", "HmacSecret", "IsInactive", "ApplyPolicyId", "DataExpires", "Monitor", "EnableDetailedRecording", "Metadata", "Tags", "Alias", "LastUpdated", "IdExtractorDeadline", "SessionLifetime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AccessSpec : pb::IMessage<AccessSpec> {
    private static readonly pb::MessageParser<AccessSpec> _parser = new pb::MessageParser<AccessSpec>(() => new AccessSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Coprocess.CoprocessSessionStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessSpec(AccessSpec other) : this() {
      url_ = other.url_;
      methods_ = other.methods_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessSpec Clone() {
      return new AccessSpec(this);
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 1;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "methods" field.</summary>
    public const int MethodsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_methods_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> methods_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Methods {
      get { return methods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Url != other.Url) return false;
      if(!methods_.Equals(other.methods_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      hash ^= methods_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Url.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Url);
      }
      methods_.WriteTo(output, _repeated_methods_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      size += methods_.CalculateSize(_repeated_methods_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessSpec other) {
      if (other == null) {
        return;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      methods_.Add(other.methods_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Url = input.ReadString();
            break;
          }
          case 18: {
            methods_.AddEntriesFrom(input, _repeated_methods_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccessDefinition : pb::IMessage<AccessDefinition> {
    private static readonly pb::MessageParser<AccessDefinition> _parser = new pb::MessageParser<AccessDefinition>(() => new AccessDefinition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Coprocess.CoprocessSessionStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessDefinition(AccessDefinition other) : this() {
      apiName_ = other.apiName_;
      apiId_ = other.apiId_;
      versions_ = other.versions_.Clone();
      allowedUrls_ = other.allowedUrls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessDefinition Clone() {
      return new AccessDefinition(this);
    }

    /// <summary>Field number for the "api_name" field.</summary>
    public const int ApiNameFieldNumber = 1;
    private string apiName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiName {
      get { return apiName_; }
      set {
        apiName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "api_id" field.</summary>
    public const int ApiIdFieldNumber = 2;
    private string apiId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiId {
      get { return apiId_; }
      set {
        apiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_versions_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> versions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Versions {
      get { return versions_; }
    }

    /// <summary>Field number for the "allowed_urls" field.</summary>
    public const int AllowedUrlsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Coprocess.AccessSpec> _repeated_allowedUrls_codec
        = pb::FieldCodec.ForMessage(34, global::Coprocess.AccessSpec.Parser);
    private readonly pbc::RepeatedField<global::Coprocess.AccessSpec> allowedUrls_ = new pbc::RepeatedField<global::Coprocess.AccessSpec>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Coprocess.AccessSpec> AllowedUrls {
      get { return allowedUrls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApiName != other.ApiName) return false;
      if (ApiId != other.ApiId) return false;
      if(!versions_.Equals(other.versions_)) return false;
      if(!allowedUrls_.Equals(other.allowedUrls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApiName.Length != 0) hash ^= ApiName.GetHashCode();
      if (ApiId.Length != 0) hash ^= ApiId.GetHashCode();
      hash ^= versions_.GetHashCode();
      hash ^= allowedUrls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApiName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ApiName);
      }
      if (ApiId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ApiId);
      }
      versions_.WriteTo(output, _repeated_versions_codec);
      allowedUrls_.WriteTo(output, _repeated_allowedUrls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApiName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiName);
      }
      if (ApiId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiId);
      }
      size += versions_.CalculateSize(_repeated_versions_codec);
      size += allowedUrls_.CalculateSize(_repeated_allowedUrls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessDefinition other) {
      if (other == null) {
        return;
      }
      if (other.ApiName.Length != 0) {
        ApiName = other.ApiName;
      }
      if (other.ApiId.Length != 0) {
        ApiId = other.ApiId;
      }
      versions_.Add(other.versions_);
      allowedUrls_.Add(other.allowedUrls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ApiName = input.ReadString();
            break;
          }
          case 18: {
            ApiId = input.ReadString();
            break;
          }
          case 26: {
            versions_.AddEntriesFrom(input, _repeated_versions_codec);
            break;
          }
          case 34: {
            allowedUrls_.AddEntriesFrom(input, _repeated_allowedUrls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicAuthData : pb::IMessage<BasicAuthData> {
    private static readonly pb::MessageParser<BasicAuthData> _parser = new pb::MessageParser<BasicAuthData>(() => new BasicAuthData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicAuthData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Coprocess.CoprocessSessionStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicAuthData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicAuthData(BasicAuthData other) : this() {
      password_ = other.password_;
      hash_ = other.hash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicAuthData Clone() {
      return new BasicAuthData(this);
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicAuthData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicAuthData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Password != other.Password) return false;
      if (Hash != other.Hash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Hash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicAuthData other) {
      if (other == null) {
        return;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
          case 18: {
            Hash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JWTData : pb::IMessage<JWTData> {
    private static readonly pb::MessageParser<JWTData> _parser = new pb::MessageParser<JWTData>(() => new JWTData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JWTData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Coprocess.CoprocessSessionStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JWTData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JWTData(JWTData other) : this() {
      secret_ = other.secret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JWTData Clone() {
      return new JWTData(this);
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 1;
    private string secret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JWTData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JWTData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Secret != other.Secret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Secret.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Secret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JWTData other) {
      if (other == null) {
        return;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Secret = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Monitor : pb::IMessage<Monitor> {
    private static readonly pb::MessageParser<Monitor> _parser = new pb::MessageParser<Monitor>(() => new Monitor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monitor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Coprocess.CoprocessSessionStateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitor(Monitor other) : this() {
      triggerLimits_ = other.triggerLimits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitor Clone() {
      return new Monitor(this);
    }

    /// <summary>Field number for the "trigger_limits" field.</summary>
    public const int TriggerLimitsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_triggerLimits_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> triggerLimits_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> TriggerLimits {
      get { return triggerLimits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monitor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monitor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!triggerLimits_.Equals(other.triggerLimits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= triggerLimits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      triggerLimits_.WriteTo(output, _repeated_triggerLimits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += triggerLimits_.CalculateSize(_repeated_triggerLimits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monitor other) {
      if (other == null) {
        return;
      }
      triggerLimits_.Add(other.triggerLimits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 9: {
            triggerLimits_.AddEntriesFrom(input, _repeated_triggerLimits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionState : pb::IMessage<SessionState> {
    private static readonly pb::MessageParser<SessionState> _parser = new pb::MessageParser<SessionState>(() => new SessionState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Coprocess.CoprocessSessionStateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionState(SessionState other) : this() {
      lastCheck_ = other.lastCheck_;
      allowance_ = other.allowance_;
      rate_ = other.rate_;
      per_ = other.per_;
      expires_ = other.expires_;
      quotaMax_ = other.quotaMax_;
      quotaRenews_ = other.quotaRenews_;
      quotaRemaining_ = other.quotaRemaining_;
      quotaRenewalRate_ = other.quotaRenewalRate_;
      accessRights_ = other.accessRights_.Clone();
      orgId_ = other.orgId_;
      oauthClientId_ = other.oauthClientId_;
      oauthKeys_ = other.oauthKeys_.Clone();
      BasicAuthData = other.basicAuthData_ != null ? other.BasicAuthData.Clone() : null;
      JwtData = other.jwtData_ != null ? other.JwtData.Clone() : null;
      hmacEnabled_ = other.hmacEnabled_;
      hmacSecret_ = other.hmacSecret_;
      isInactive_ = other.isInactive_;
      applyPolicyId_ = other.applyPolicyId_;
      dataExpires_ = other.dataExpires_;
      Monitor = other.monitor_ != null ? other.Monitor.Clone() : null;
      enableDetailedRecording_ = other.enableDetailedRecording_;
      metadata_ = other.metadata_;
      tags_ = other.tags_.Clone();
      alias_ = other.alias_;
      lastUpdated_ = other.lastUpdated_;
      idExtractorDeadline_ = other.idExtractorDeadline_;
      sessionLifetime_ = other.sessionLifetime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionState Clone() {
      return new SessionState(this);
    }

    /// <summary>Field number for the "last_check" field.</summary>
    public const int LastCheckFieldNumber = 1;
    private long lastCheck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastCheck {
      get { return lastCheck_; }
      set {
        lastCheck_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 2;
    private double allowance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 3;
    private double rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "per" field.</summary>
    public const int PerFieldNumber = 4;
    private double per_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Per {
      get { return per_; }
      set {
        per_ = value;
      }
    }

    /// <summary>Field number for the "expires" field.</summary>
    public const int ExpiresFieldNumber = 5;
    private long expires_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expires {
      get { return expires_; }
      set {
        expires_ = value;
      }
    }

    /// <summary>Field number for the "quota_max" field.</summary>
    public const int QuotaMaxFieldNumber = 6;
    private long quotaMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuotaMax {
      get { return quotaMax_; }
      set {
        quotaMax_ = value;
      }
    }

    /// <summary>Field number for the "quota_renews" field.</summary>
    public const int QuotaRenewsFieldNumber = 7;
    private long quotaRenews_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuotaRenews {
      get { return quotaRenews_; }
      set {
        quotaRenews_ = value;
      }
    }

    /// <summary>Field number for the "quota_remaining" field.</summary>
    public const int QuotaRemainingFieldNumber = 8;
    private long quotaRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuotaRemaining {
      get { return quotaRemaining_; }
      set {
        quotaRemaining_ = value;
      }
    }

    /// <summary>Field number for the "quota_renewal_rate" field.</summary>
    public const int QuotaRenewalRateFieldNumber = 9;
    private long quotaRenewalRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QuotaRenewalRate {
      get { return quotaRenewalRate_; }
      set {
        quotaRenewalRate_ = value;
      }
    }

    /// <summary>Field number for the "access_rights" field.</summary>
    public const int AccessRightsFieldNumber = 10;
    private static readonly pbc::MapField<string, global::Coprocess.AccessDefinition>.Codec _map_accessRights_codec
        = new pbc::MapField<string, global::Coprocess.AccessDefinition>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Coprocess.AccessDefinition.Parser), 82);
    private readonly pbc::MapField<string, global::Coprocess.AccessDefinition> accessRights_ = new pbc::MapField<string, global::Coprocess.AccessDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Coprocess.AccessDefinition> AccessRights {
      get { return accessRights_; }
    }

    /// <summary>Field number for the "org_id" field.</summary>
    public const int OrgIdFieldNumber = 11;
    private string orgId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrgId {
      get { return orgId_; }
      set {
        orgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oauth_client_id" field.</summary>
    public const int OauthClientIdFieldNumber = 12;
    private string oauthClientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OauthClientId {
      get { return oauthClientId_; }
      set {
        oauthClientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oauth_keys" field.</summary>
    public const int OauthKeysFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_oauthKeys_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 106);
    private readonly pbc::MapField<string, string> oauthKeys_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> OauthKeys {
      get { return oauthKeys_; }
    }

    /// <summary>Field number for the "basic_auth_data" field.</summary>
    public const int BasicAuthDataFieldNumber = 14;
    private global::Coprocess.BasicAuthData basicAuthData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Coprocess.BasicAuthData BasicAuthData {
      get { return basicAuthData_; }
      set {
        basicAuthData_ = value;
      }
    }

    /// <summary>Field number for the "jwt_data" field.</summary>
    public const int JwtDataFieldNumber = 15;
    private global::Coprocess.JWTData jwtData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Coprocess.JWTData JwtData {
      get { return jwtData_; }
      set {
        jwtData_ = value;
      }
    }

    /// <summary>Field number for the "hmac_enabled" field.</summary>
    public const int HmacEnabledFieldNumber = 16;
    private bool hmacEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HmacEnabled {
      get { return hmacEnabled_; }
      set {
        hmacEnabled_ = value;
      }
    }

    /// <summary>Field number for the "hmac_secret" field.</summary>
    public const int HmacSecretFieldNumber = 17;
    private string hmacSecret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HmacSecret {
      get { return hmacSecret_; }
      set {
        hmacSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_inactive" field.</summary>
    public const int IsInactiveFieldNumber = 18;
    private bool isInactive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInactive {
      get { return isInactive_; }
      set {
        isInactive_ = value;
      }
    }

    /// <summary>Field number for the "apply_policy_id" field.</summary>
    public const int ApplyPolicyIdFieldNumber = 19;
    private string applyPolicyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApplyPolicyId {
      get { return applyPolicyId_; }
      set {
        applyPolicyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_expires" field.</summary>
    public const int DataExpiresFieldNumber = 20;
    private long dataExpires_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DataExpires {
      get { return dataExpires_; }
      set {
        dataExpires_ = value;
      }
    }

    /// <summary>Field number for the "monitor" field.</summary>
    public const int MonitorFieldNumber = 21;
    private global::Coprocess.Monitor monitor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Coprocess.Monitor Monitor {
      get { return monitor_; }
      set {
        monitor_ = value;
      }
    }

    /// <summary>Field number for the "enable_detailed_recording" field.</summary>
    public const int EnableDetailedRecordingFieldNumber = 22;
    private bool enableDetailedRecording_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableDetailedRecording {
      get { return enableDetailedRecording_; }
      set {
        enableDetailedRecording_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 23;
    private string metadata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 24;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(194);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 25;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_updated" field.</summary>
    public const int LastUpdatedFieldNumber = 26;
    private string lastUpdated_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastUpdated {
      get { return lastUpdated_; }
      set {
        lastUpdated_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id_extractor_deadline" field.</summary>
    public const int IdExtractorDeadlineFieldNumber = 27;
    private long idExtractorDeadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IdExtractorDeadline {
      get { return idExtractorDeadline_; }
      set {
        idExtractorDeadline_ = value;
      }
    }

    /// <summary>Field number for the "session_lifetime" field.</summary>
    public const int SessionLifetimeFieldNumber = 28;
    private long sessionLifetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionLifetime {
      get { return sessionLifetime_; }
      set {
        sessionLifetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastCheck != other.LastCheck) return false;
      if (Allowance != other.Allowance) return false;
      if (Rate != other.Rate) return false;
      if (Per != other.Per) return false;
      if (Expires != other.Expires) return false;
      if (QuotaMax != other.QuotaMax) return false;
      if (QuotaRenews != other.QuotaRenews) return false;
      if (QuotaRemaining != other.QuotaRemaining) return false;
      if (QuotaRenewalRate != other.QuotaRenewalRate) return false;
      if (!AccessRights.Equals(other.AccessRights)) return false;
      if (OrgId != other.OrgId) return false;
      if (OauthClientId != other.OauthClientId) return false;
      if (!OauthKeys.Equals(other.OauthKeys)) return false;
      if (!object.Equals(BasicAuthData, other.BasicAuthData)) return false;
      if (!object.Equals(JwtData, other.JwtData)) return false;
      if (HmacEnabled != other.HmacEnabled) return false;
      if (HmacSecret != other.HmacSecret) return false;
      if (IsInactive != other.IsInactive) return false;
      if (ApplyPolicyId != other.ApplyPolicyId) return false;
      if (DataExpires != other.DataExpires) return false;
      if (!object.Equals(Monitor, other.Monitor)) return false;
      if (EnableDetailedRecording != other.EnableDetailedRecording) return false;
      if (Metadata != other.Metadata) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (Alias != other.Alias) return false;
      if (LastUpdated != other.LastUpdated) return false;
      if (IdExtractorDeadline != other.IdExtractorDeadline) return false;
      if (SessionLifetime != other.SessionLifetime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastCheck != 0L) hash ^= LastCheck.GetHashCode();
      if (Allowance != 0D) hash ^= Allowance.GetHashCode();
      if (Rate != 0D) hash ^= Rate.GetHashCode();
      if (Per != 0D) hash ^= Per.GetHashCode();
      if (Expires != 0L) hash ^= Expires.GetHashCode();
      if (QuotaMax != 0L) hash ^= QuotaMax.GetHashCode();
      if (QuotaRenews != 0L) hash ^= QuotaRenews.GetHashCode();
      if (QuotaRemaining != 0L) hash ^= QuotaRemaining.GetHashCode();
      if (QuotaRenewalRate != 0L) hash ^= QuotaRenewalRate.GetHashCode();
      hash ^= AccessRights.GetHashCode();
      if (OrgId.Length != 0) hash ^= OrgId.GetHashCode();
      if (OauthClientId.Length != 0) hash ^= OauthClientId.GetHashCode();
      hash ^= OauthKeys.GetHashCode();
      if (basicAuthData_ != null) hash ^= BasicAuthData.GetHashCode();
      if (jwtData_ != null) hash ^= JwtData.GetHashCode();
      if (HmacEnabled != false) hash ^= HmacEnabled.GetHashCode();
      if (HmacSecret.Length != 0) hash ^= HmacSecret.GetHashCode();
      if (IsInactive != false) hash ^= IsInactive.GetHashCode();
      if (ApplyPolicyId.Length != 0) hash ^= ApplyPolicyId.GetHashCode();
      if (DataExpires != 0L) hash ^= DataExpires.GetHashCode();
      if (monitor_ != null) hash ^= Monitor.GetHashCode();
      if (EnableDetailedRecording != false) hash ^= EnableDetailedRecording.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (LastUpdated.Length != 0) hash ^= LastUpdated.GetHashCode();
      if (IdExtractorDeadline != 0L) hash ^= IdExtractorDeadline.GetHashCode();
      if (SessionLifetime != 0L) hash ^= SessionLifetime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastCheck != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastCheck);
      }
      if (Allowance != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Allowance);
      }
      if (Rate != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Rate);
      }
      if (Per != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Per);
      }
      if (Expires != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Expires);
      }
      if (QuotaMax != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(QuotaMax);
      }
      if (QuotaRenews != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(QuotaRenews);
      }
      if (QuotaRemaining != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(QuotaRemaining);
      }
      if (QuotaRenewalRate != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(QuotaRenewalRate);
      }
      accessRights_.WriteTo(output, _map_accessRights_codec);
      if (OrgId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OrgId);
      }
      if (OauthClientId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(OauthClientId);
      }
      oauthKeys_.WriteTo(output, _map_oauthKeys_codec);
      if (basicAuthData_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(BasicAuthData);
      }
      if (jwtData_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(JwtData);
      }
      if (HmacEnabled != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(HmacEnabled);
      }
      if (HmacSecret.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(HmacSecret);
      }
      if (IsInactive != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsInactive);
      }
      if (ApplyPolicyId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ApplyPolicyId);
      }
      if (DataExpires != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(DataExpires);
      }
      if (monitor_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Monitor);
      }
      if (EnableDetailedRecording != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(EnableDetailedRecording);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Metadata);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (Alias.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Alias);
      }
      if (LastUpdated.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(LastUpdated);
      }
      if (IdExtractorDeadline != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(IdExtractorDeadline);
      }
      if (SessionLifetime != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(SessionLifetime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastCheck != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCheck);
      }
      if (Allowance != 0D) {
        size += 1 + 8;
      }
      if (Rate != 0D) {
        size += 1 + 8;
      }
      if (Per != 0D) {
        size += 1 + 8;
      }
      if (Expires != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expires);
      }
      if (QuotaMax != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuotaMax);
      }
      if (QuotaRenews != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuotaRenews);
      }
      if (QuotaRemaining != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuotaRemaining);
      }
      if (QuotaRenewalRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuotaRenewalRate);
      }
      size += accessRights_.CalculateSize(_map_accessRights_codec);
      if (OrgId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrgId);
      }
      if (OauthClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OauthClientId);
      }
      size += oauthKeys_.CalculateSize(_map_oauthKeys_codec);
      if (basicAuthData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BasicAuthData);
      }
      if (jwtData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JwtData);
      }
      if (HmacEnabled != false) {
        size += 2 + 1;
      }
      if (HmacSecret.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HmacSecret);
      }
      if (IsInactive != false) {
        size += 2 + 1;
      }
      if (ApplyPolicyId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApplyPolicyId);
      }
      if (DataExpires != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DataExpires);
      }
      if (monitor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Monitor);
      }
      if (EnableDetailedRecording != false) {
        size += 2 + 1;
      }
      if (Metadata.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (Alias.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (LastUpdated.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastUpdated);
      }
      if (IdExtractorDeadline != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IdExtractorDeadline);
      }
      if (SessionLifetime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SessionLifetime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionState other) {
      if (other == null) {
        return;
      }
      if (other.LastCheck != 0L) {
        LastCheck = other.LastCheck;
      }
      if (other.Allowance != 0D) {
        Allowance = other.Allowance;
      }
      if (other.Rate != 0D) {
        Rate = other.Rate;
      }
      if (other.Per != 0D) {
        Per = other.Per;
      }
      if (other.Expires != 0L) {
        Expires = other.Expires;
      }
      if (other.QuotaMax != 0L) {
        QuotaMax = other.QuotaMax;
      }
      if (other.QuotaRenews != 0L) {
        QuotaRenews = other.QuotaRenews;
      }
      if (other.QuotaRemaining != 0L) {
        QuotaRemaining = other.QuotaRemaining;
      }
      if (other.QuotaRenewalRate != 0L) {
        QuotaRenewalRate = other.QuotaRenewalRate;
      }
      accessRights_.Add(other.accessRights_);
      if (other.OrgId.Length != 0) {
        OrgId = other.OrgId;
      }
      if (other.OauthClientId.Length != 0) {
        OauthClientId = other.OauthClientId;
      }
      oauthKeys_.Add(other.oauthKeys_);
      if (other.basicAuthData_ != null) {
        if (basicAuthData_ == null) {
          basicAuthData_ = new global::Coprocess.BasicAuthData();
        }
        BasicAuthData.MergeFrom(other.BasicAuthData);
      }
      if (other.jwtData_ != null) {
        if (jwtData_ == null) {
          jwtData_ = new global::Coprocess.JWTData();
        }
        JwtData.MergeFrom(other.JwtData);
      }
      if (other.HmacEnabled != false) {
        HmacEnabled = other.HmacEnabled;
      }
      if (other.HmacSecret.Length != 0) {
        HmacSecret = other.HmacSecret;
      }
      if (other.IsInactive != false) {
        IsInactive = other.IsInactive;
      }
      if (other.ApplyPolicyId.Length != 0) {
        ApplyPolicyId = other.ApplyPolicyId;
      }
      if (other.DataExpires != 0L) {
        DataExpires = other.DataExpires;
      }
      if (other.monitor_ != null) {
        if (monitor_ == null) {
          monitor_ = new global::Coprocess.Monitor();
        }
        Monitor.MergeFrom(other.Monitor);
      }
      if (other.EnableDetailedRecording != false) {
        EnableDetailedRecording = other.EnableDetailedRecording;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      tags_.Add(other.tags_);
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.LastUpdated.Length != 0) {
        LastUpdated = other.LastUpdated;
      }
      if (other.IdExtractorDeadline != 0L) {
        IdExtractorDeadline = other.IdExtractorDeadline;
      }
      if (other.SessionLifetime != 0L) {
        SessionLifetime = other.SessionLifetime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastCheck = input.ReadInt64();
            break;
          }
          case 17: {
            Allowance = input.ReadDouble();
            break;
          }
          case 25: {
            Rate = input.ReadDouble();
            break;
          }
          case 33: {
            Per = input.ReadDouble();
            break;
          }
          case 40: {
            Expires = input.ReadInt64();
            break;
          }
          case 48: {
            QuotaMax = input.ReadInt64();
            break;
          }
          case 56: {
            QuotaRenews = input.ReadInt64();
            break;
          }
          case 64: {
            QuotaRemaining = input.ReadInt64();
            break;
          }
          case 72: {
            QuotaRenewalRate = input.ReadInt64();
            break;
          }
          case 82: {
            accessRights_.AddEntriesFrom(input, _map_accessRights_codec);
            break;
          }
          case 90: {
            OrgId = input.ReadString();
            break;
          }
          case 98: {
            OauthClientId = input.ReadString();
            break;
          }
          case 106: {
            oauthKeys_.AddEntriesFrom(input, _map_oauthKeys_codec);
            break;
          }
          case 114: {
            if (basicAuthData_ == null) {
              basicAuthData_ = new global::Coprocess.BasicAuthData();
            }
            input.ReadMessage(basicAuthData_);
            break;
          }
          case 122: {
            if (jwtData_ == null) {
              jwtData_ = new global::Coprocess.JWTData();
            }
            input.ReadMessage(jwtData_);
            break;
          }
          case 128: {
            HmacEnabled = input.ReadBool();
            break;
          }
          case 138: {
            HmacSecret = input.ReadString();
            break;
          }
          case 144: {
            IsInactive = input.ReadBool();
            break;
          }
          case 154: {
            ApplyPolicyId = input.ReadString();
            break;
          }
          case 160: {
            DataExpires = input.ReadInt64();
            break;
          }
          case 170: {
            if (monitor_ == null) {
              monitor_ = new global::Coprocess.Monitor();
            }
            input.ReadMessage(monitor_);
            break;
          }
          case 176: {
            EnableDetailedRecording = input.ReadBool();
            break;
          }
          case 186: {
            Metadata = input.ReadString();
            break;
          }
          case 194: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 202: {
            Alias = input.ReadString();
            break;
          }
          case 210: {
            LastUpdated = input.ReadString();
            break;
          }
          case 216: {
            IdExtractorDeadline = input.ReadInt64();
            break;
          }
          case 224: {
            SessionLifetime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
